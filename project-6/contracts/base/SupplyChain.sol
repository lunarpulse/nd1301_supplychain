// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

import "../core/Ownable.sol";
import "../accesscontrol/roles/AuditorRole.sol";
import "../accesscontrol/roles/EndUserRole.sol";
import "../accesscontrol/roles/ManufacturerRole.sol";
import "../accesscontrol/roles/MaintainerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is
    Ownable,
    EndUserRole,
    MaintainerRole,
    ManufacturerRole,
    AuditorRole
{
    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint256 upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint256 sku;

    // Define a public mapping 'items' that maps the UPC to an Equipment.
    mapping(uint256 => Equipment) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping(uint256 => string[]) itemsHistory;

    // Define a variable called 'certification_sku' for Certification Stock Keeping Unit (SKU)
    uint256 certification_sku;

    // Define a variable called 'inspection_sku' for Inspection Stock Keeping Unit (SKU)
    uint256 inspection_sku;

    // Define a variable called 'maintenance_sku' for Maintenance Stock Keeping Unit (SKU)
    uint256 maintenance_sku;

    // Define a variable called 'maintenanceQuote_sku' for MaintenanceQuote Stock Keeping Unit (SKU)
    uint256 maintenanceQuote_sku;
    // Define a public mapping 'maintenanceQuoteRecords' that maps the UPC to an Equipment,
    // that track its MaintenanceQuote through the supply chain
    mapping(uint256 => MaintenanceQuote) maintenanceQuoteRecords;

    // Define enum 'State' with the following values:
    enum State {
        NotExisting,
        PendingManufacture,
        Manufactured,
        EquipmentOrdered,
        PendingModification,
        Modified,
        PendingCertification,
        InspectedManufacture,
        Inspected,
        Certified,
        Shipped,
        Received,
        Commission,
        Utilisation,
        PendingMaintenance,
        QuotedMaintenance,
        PaidMaintenance,
        RequestRepair,
        Repaired,
        PendingInspection,
        Audited,
        PendingDecommissioning,
        Decommission
    }

    State constant defaultState = State.NotExisting;

    // Define a struct 'Equipment' with the following fields:
    struct Equipment {
        uint256 sku; // Stock Keeping Unit (SKU)
        uint256 upc; // Universal Product Code (UPC), generated by the Manufacturer, goes on the package, can be verified by the enduser
        address ownerID; // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originManufacturerID; // Metamask-Ethereum address of the Manufacturer
        string originManufacturerName; // Manufacturer Name
        string originManufacturerInformation; // Manufacturer Information
        uint256 productID; // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint256 productPrice; // Product Price
        State itemState; // Product State as represented in the enum above
        address payable manufacturerID; // Metamask-Ethereum address of the Manufacturer
        address payable maintainerID; // Metamask-Ethereum address of the maintainer
        address payable auditorID; // Metamask-Ethereum address of the auditor
        address payable enduserID; // Metamask-Ethereum address of the enduser
        uint256 certification_sku; // the latest certification sku
        string certificationNote; // the latest certification note
        uint256[] certificationHistory; // the hitory of certification sku
        uint256 inspection_sku; // the latest inspection_sku
        //string inspectionNote; // the latest inspection note
        //        uint256[] inspectionHistory; // the hitory of inspection_sku
        uint256 maintenance_sku; // the latest maintenance sku
        //string maintenanceNote; // the latest maintenance note
        uint256[] maintenanceHistory; // the hitory of maintenance sku
        uint256 maintenanceQuote_sku; // the latest maintenanceQuote_sku
        //        uint256[] maintenanceQuoteHistory; // the hitory of maintenanceQuote sku
    }

    struct Certification {
        uint256 sku;
        uint256 equipment_upc;
        address auditorID;
        string certificationNote;
    }

    struct Inspection {
        uint256 sku;
        uint256 equipment_upc;
        uint256 maintenance_sku;
        address examinerID;
        string inspectionNote;
        bool pass;
    }

    struct Maintenance {
        uint256 sku;
        uint256 equipment_upc;
        address maintainerID;
        string maintainanceNote;
    }

    struct MaintenanceQuote {
        uint256 sku;
        uint256 equipment_upc;
        uint256 maintenance_sku;
        address payable auditorID;
        address payable maintainerID;
        uint256 QuotedMaintenanceCost;
        string maintenanceQuoteNote;
        uint256 maintenanceQuoteFee;
        bool performDecommission;
        bool accepted;
    }

    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event PendingManufacture(uint256 upc);
    event Manufactured(uint256 upc);
    event EquipmentOrdered(uint256 upc);
    event PendingModification(uint256 upc);
    event Modified(uint256 upc);
    event PendingCertification(uint256 upc);
    event InspectedManufacture(uint256 upc);
    event Inspected(uint256 upc);
    event Certified(uint256 upc);
    event Shipped(uint256 upc);
    event Received(uint256 upc);
    event Commission(uint256 upc);
    event Utilisation(uint256 upc);
    event PendingMaintenance(uint256 upc);
    event QuotedMaintenance(uint256 upc);
    event PaidMaintenance(uint256 upc);
    event RequestRepair(uint256 upc);
    event Repaired(uint256 upc);
    event PendingInspection(uint256 upc);
    event Audited(uint256 upc);
    event PendingDecommissioning(uint256 upc);
    event Decommission(uint256 upc);

    // Define a modifer that verifies the Caller
    modifier verifyCaller(address _address) {
        require(msg.sender == _address);
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint256 _price) {
        require(msg.value >= _price);
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint256 _price, address _receiver) {
        _;
        uint256 amountToReturn = msg.value - _price;
        payable(_receiver).transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is PendingManufacture
    modifier pendingManufacturing(uint256 _upc) {
        require(items[_upc].itemState == State.PendingManufacture);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Manufactured
    modifier manufactured(uint256 _upc) {
        require(items[_upc].itemState == State.Manufactured);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is EquipmentOrdered
    modifier equipmentOrdered(uint256 _upc) {
        require(items[_upc].itemState == State.EquipmentOrdered);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is PendingCertification
    modifier pendingCertification(uint256 _upc) {
        require(items[_upc].itemState == State.PendingCertification);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is PendingModification
    modifier pendingModification(uint256 _upc) {
        require(items[_upc].itemState == State.PendingModification);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Modified
    modifier modified(uint256 _upc) {
        require(items[_upc].itemState == State.Modified);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is InspectedManufacture
    modifier inspectedManufacture(uint256 _upc) {
        require(items[_upc].itemState == State.InspectedManufacture);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Inspected
    modifier inspected(uint256 _upc) {
        require(items[_upc].itemState == State.Inspected);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Certified
    modifier certified(uint256 _upc) {
        require(items[_upc].itemState == State.Certified);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint256 _upc) {
        require(items[_upc].itemState == State.Shipped);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier received(uint256 _upc) {
        require(items[_upc].itemState == State.Received);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Commission
    modifier commission(uint256 _upc) {
        require(items[_upc].itemState == State.Commission);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Utilisation
    modifier utilisation(uint256 _upc) {
        require(items[_upc].itemState == State.Utilisation);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is PendingMaintenance
    modifier pendingMaintenance(uint256 _upc) {
        require(items[_upc].itemState == State.PendingMaintenance);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is QuotedMaintenance
    modifier quotedMaintenance(uint256 _upc) {
        require(items[_upc].itemState == State.QuotedMaintenance);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is PaidMaintenance
    modifier paidMaintenance(uint256 _upc) {
        require(items[_upc].itemState == State.PaidMaintenance);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is RequestRepair
    modifier requestRepair(uint256 _upc) {
        require(items[_upc].itemState == State.RequestRepair);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Repaired
    modifier repaired(uint256 _upc) {
        require(items[_upc].itemState == State.Repaired);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is PendingInspection
    modifier pendingInspection(uint256 _upc) {
        require(items[_upc].itemState == State.PendingInspection);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Audited
    modifier audited(uint256 _upc) {
        require(items[_upc].itemState == State.Audited);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is PendingDecommissioning
    modifier pendingDecommissioning(uint256 _upc) {
        require(items[_upc].itemState == State.PendingDecommissioning);
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Decommission
    modifier decommission(uint256 _upc) {
        require(items[_upc].itemState == State.Decommission);
        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public payable {
        sku = 1;
        upc = 1;
    }

    // Define a function 'kill' if required
    function kill() public onlyOwner {
        selfdestruct(payable(owner()));
    }

    // Define a function 'createEquipment' that allows a Manufacturer to mark an item 'PendingManufacture'
    function createEquipment(
        uint256 _upc,
        address _originManufacturerID,
        string calldata _originManufacturerName,
        string calldata _originManufacturerInformation,
        string calldata _productNotes,
        uint256 _productPrice
    ) public onlyManufacturer {
        items[_upc] = Equipment({
            sku: sku,
            upc: _upc,
            ownerID: msg.sender,
            originManufacturerID: _originManufacturerID,
            originManufacturerName: _originManufacturerName,
            originManufacturerInformation: _originManufacturerInformation,
            productID: _upc + sku,
            productNotes: _productNotes,
            productPrice: _productPrice,
            itemState: State.PendingManufacture,
            manufacturerID: payable(address(0)),
            maintainerID: payable(address(0)),
            auditorID: payable(address(0)),
            enduserID: payable(address(0)),
            certification_sku: certification_sku,
            certificationNote: "",
            inspection_sku: inspection_sku,
            maintenance_sku: maintenance_sku,
            maintenanceQuote_sku: maintenanceQuote_sku,
            certificationHistory: new uint256[](0),
            maintenanceHistory: new uint256[](0)
        });

        sku = sku + 1;

        emit PendingManufacture(_upc);
    }

    // leave some notes?
    // Define a function 'manufactureEquipment' that allows a onlyManufacturer to mark an item 'Manufactured'
    function manufactureEquipment(uint256 _upc)
        public
        onlyManufacturer
        pendingManufacturing(_upc)
    {
        items[_upc].itemState = State.Manufactured;
        items[_upc].manufacturerID = payable(msg.sender);
        emit Manufactured(_upc);
    }

    // Define a function 'orderEquipment' that allows a EndUser to mark an item 'EquipmentOrdered'
    function orderEquipment(uint256 _upc, address _auditorID)
        public
        payable
        onlyEndUser
        manufactured(_upc)
        paidEnough(items[_upc].productPrice)
        checkValue(items[_upc].productPrice, items[_upc].enduserID)
    {
        items[_upc].auditorID = payable(address(_auditorID));
        items[_upc].manufacturerID.transfer(items[_upc].productPrice);

        items[_upc].ownerID = msg.sender;

        items[_upc].itemState = State.EquipmentOrdered;
        emit EquipmentOrdered(_upc);
    }

    // Define a function 'manufactureEquipment' that allows a onlyManufacturer to mark an item 'PendingCertification'
    function requestCertification(uint256 _upc)
        public
        onlyManufacturer
        modified(_upc)
        verifyCaller(items[_upc].manufacturerID)
    {
        items[_upc].itemState = State.PendingCertification;
        emit PendingCertification(_upc);
    }

    // Define a function 'modifyEquipment' that allows a onlyManufacturer to mark an item 'Modified'
    function modifyEquipment(uint256 _upc)
        public
        onlyManufacturer
        pendingModification(_upc)
        verifyCaller(items[_upc].manufacturerID)
    {
        items[_upc].itemState = State.Modified;
        emit Modified(_upc);
    }

    // Define a function 'requestModification()' that allows a onlyAuditor to mark an item 'PendingModification'
    function requestModification(uint256 _upc)
        public
        onlyAuditor
        equipmentOrdered(_upc)
        verifyCaller(items[_upc].auditorID)
    {
        items[_upc].itemState = State.PendingModification;
        emit PendingModification(_upc);
    }

    // Define a function 'inspectEquipment()' that allows a onlyAuditor to mark an item 'InspectedManufacture'
    function inspectEquipment(uint256 _upc)
        public
        onlyAuditor
        pendingCertification(_upc)
        verifyCaller(items[_upc].auditorID)
    {
        items[_upc].itemState = State.InspectedManufacture;
        emit InspectedManufacture(_upc);
    }

    // Define a function 'rejectCertification()' that allows a onlyAuditor to mark an item 'PendingModification'
    function rejectCertification(uint256 _upc)
        public
        onlyAuditor
        inspectedManufacture(_upc)
        verifyCaller(items[_upc].auditorID)
    {
        items[_upc].itemState = State.PendingModification;
        emit PendingModification(_upc);
    }

    // Define a function 'certifyEquipment()' that allows a onlyAuditor to mark an item 'Certified'
    function certifyEquipment(uint256 _upc, string calldata _certificationNote)
        public
        onlyAuditor
        inspectedManufacture(_upc)
        verifyCaller(items[_upc].auditorID)
    {
        items[_upc].certification_sku = certification_sku;
        items[_upc].certificationHistory.push(certification_sku);
        items[_upc].certificationNote = _certificationNote;
        certification_sku = certification_sku + 1;

        items[_upc].itemState = State.Certified;
        emit Certified(_upc);
    }

    // Define a function 'shipEquipment' that allows a onlyManufacturer to mark an item 'Shipped'
    function shipEquipment(uint256 _upc)
        public
        onlyManufacturer
        certified(_upc)
        verifyCaller(items[_upc].manufacturerID)
    {
        items[_upc].itemState = State.Shipped;
        emit Shipped(_upc);
    }

    // Define a function 'receiveEquipment' that allows a EndUser to mark an item 'Received'
    function receiveEquipment(uint256 _upc)
        public
        onlyEndUser
        shipped(_upc)
        verifyCaller(items[_upc].ownerID)
    {
        items[_upc].itemState = State.Received;
        emit Received(_upc);
    }

    // Define a function 'commissioningEquipment' that allows a EndUser to mark an item 'Commission'
    function commissioningEquipment(uint256 _upc)
        public
        onlyEndUser
        received(_upc)
        verifyCaller(items[_upc].ownerID)
    {
        items[_upc].itemState = State.Commission;
        emit Commission(_upc);
    }

    // utilisation record aded
    // Define a function 'utilseEquipment' that allows a EndUser to mark an item 'Utilisation'
    function utilseEquipment(uint256 _upc)
        public
        onlyEndUser
        commission(_upc)
        verifyCaller(items[_upc].ownerID)
    {
        items[_upc].itemState = State.Utilisation;
        emit Utilisation(_upc);
    }

    // Define a function 'orderMaintainance' that allows a EndUser to mark an item 'PendingMaintenance'
    function orderMaintainance(
        uint256 _upc,
        address _maintainerID,
        address _auditorID
    ) public onlyEndUser utilisation(_upc) verifyCaller(items[_upc].ownerID) {
        items[_upc].maintainerID = payable(_maintainerID);
        items[_upc].auditorID = payable(_auditorID);
        items[_upc].itemState = State.PendingMaintenance;
        emit PendingMaintenance(_upc);
    }

    // Define a function 'quoteMaintenace' that allows a EndUser to mark an item 'QuotedMaintenance'
    function quoteMaintenace(
        uint256 _upc,
        uint256 _maintenanceCost,
        uint256 _maintenanceQuoteFee,
        string calldata _maintenanceQuoteNote
    )
        public
        onlyAuditor
        pendingMaintenance(_upc)
        verifyCaller(items[_upc].auditorID)
    {
        maintenanceQuoteRecords[maintenanceQuote_sku] = MaintenanceQuote({
            sku: maintenanceQuote_sku,
            equipment_upc: _upc,
            maintenance_sku: items[_upc].maintenance_sku,
            auditorID: payable(msg.sender),
            maintainerID: items[_upc].maintainerID,
            QuotedMaintenanceCost: _maintenanceCost,
            maintenanceQuoteNote: _maintenanceQuoteNote,
            maintenanceQuoteFee: _maintenanceQuoteFee,
            performDecommission: false,
            accepted: false
        });

        items[_upc].maintenanceQuote_sku = maintenanceQuote_sku;

        maintenanceQuote_sku = maintenanceQuote_sku + 1;

        items[_upc].itemState = State.QuotedMaintenance;
        emit QuotedMaintenance(_upc);
    }

    // payable the EndUser
    // Define a function 'payMaintenance' that allows a EndUser to mark an item 'PaidMaintenance'
    function rejectMaintenanceQoute(uint256 _upc)
        public
        payable
        onlyEndUser
        quotedMaintenance(_upc)
        paidEnough(
            maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
                .maintenanceQuoteFee
        )
        checkValue(
            maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
                .maintenanceQuoteFee,
            items[_upc].enduserID
        )
        verifyCaller(items[_upc].ownerID)
    {
        maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
            .accepted = false;
        maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
            .auditorID
            .transfer(
                maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
                    .maintenanceQuoteFee
            );
        items[_upc].itemState = State.PendingMaintenance;
        emit PendingMaintenance(_upc);
    }

    // payable the EndUser
    // Define a function 'payMaintenanceQuote' that allows a EndUser to mark an item 'PaidMaintenance'
    function payMaintenanceQuote(uint256 _upc)
        public
        payable
        onlyEndUser
        quotedMaintenance(_upc)
        paidEnough(
            maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
                .QuotedMaintenanceCost +
                maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
                    .maintenanceQuoteFee
        )
        checkValue(
            maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
                .QuotedMaintenanceCost +
                maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
                    .maintenanceQuoteFee,
            items[_upc].enduserID
        )
        verifyCaller(items[_upc].ownerID)
    {
        maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
            .accepted = true;
        maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
            .maintainerID
            .transfer(
                maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
                    .QuotedMaintenanceCost
            );
        maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
            .auditorID
            .transfer(
                maintenanceQuoteRecords[items[_upc].maintenanceQuote_sku]
                    .maintenanceQuoteFee
            );
        items[_upc].itemState = State.PaidMaintenance;
        emit PaidMaintenance(_upc);
    }

    // Define a function 'requireRepair' that allows a EndUser to mark an item 'RequestRepair'
    function requireRepair(uint256 _upc)
        public
        onlyAuditor
        paidMaintenance(_upc)
        verifyCaller(items[_upc].auditorID)
    {
        items[_upc].itemState = State.RequestRepair;
        emit RequestRepair(_upc);
    }

    // Define a function 'repairEquipment' that allows a EndUser to mark an item 'Repaired'
    function repairEquipment(uint256 _upc)
        public
        onlyMaintainer
        requestRepair(_upc)
        verifyCaller(items[_upc].maintainerID)
    {
        items[_upc].maintenance_sku = maintenance_sku;
        items[_upc].maintenanceHistory.push(maintenance_sku);

        maintenance_sku = maintenance_sku + 1;

        items[_upc].itemState = State.Repaired;
        emit Repaired(_upc);
    }

    // Define a function 'requestInspection' that allows a EndUser to mark an item 'PendingInspection'
    function requestInspection(uint256 _upc)
        public
        onlyMaintainer
        repaired(_upc)
        verifyCaller(items[_upc].maintainerID)
    {
        items[_upc].itemState = State.PendingInspection;
        emit PendingInspection(_upc);
    }

    // payable to Auditor
    // Define a function 'inspectEquipmentMaintainance' that allows a EndUser to mark an item 'Inspected'
    function inspectEquipmentMaintainance(
        uint256 _upc,
        bool passed
    )
        public
        onlyAuditor
        pendingInspection(_upc)
        verifyCaller(items[_upc].auditorID)
    {
        items[_upc].inspection_sku = inspection_sku;
        items[_upc].itemState = State.Inspected;
        emit Inspected(_upc);

        if (passed == true) {
            approveInspection(_upc);
        } else {
            rejectInspection(_upc);
        }

        inspection_sku = inspection_sku + 1;
    }

    // Define a function 'rejectInspection' that allows a EndUser to mark an item 'PendingMaintenance'
    function rejectInspection(uint256 _upc)
        internal
        onlyAuditor
        inspected(_upc)
        verifyCaller(items[_upc].auditorID)
    {
        items[_upc].itemState = State.RequestRepair;
        emit RequestRepair(_upc);
    }

    // Define a function 'approveInspection' that allows a EndUser to mark an item 'Audited'
    function approveInspection(uint256 _upc)
        internal
        onlyAuditor
        inspected(_upc)
        verifyCaller(items[_upc].auditorID)
    {
        items[_upc].itemState = State.Audited;
        emit Audited(_upc);
    }

    // Define a function 'shipEquipmentMaintainer' that allows a onlyManufacturer to mark an item 'Shipped'
    function shipEquipmentMaintainer(uint256 _upc)
        public
        onlyMaintainer
        audited(_upc)
        verifyCaller(items[_upc].maintainerID)
    {
        items[_upc].itemState = State.Shipped;
        emit Shipped(_upc);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            address ownerID,
            address originManufacturerID,
            string memory originManufacturerName,
            string memory originManufacturerInformation
        )
    {
        // Assign values to the 8 parameters

        return (
            itemSKU = items[_upc].sku,
            itemUPC = items[_upc].upc,
            ownerID = items[_upc].ownerID,
            originManufacturerID = items[_upc].originManufacturerID,
            originManufacturerName = items[_upc].originManufacturerName,
            originManufacturerInformation = items[_upc].originManufacturerInformation
        );
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint256 _upc)
        public
        view
        returns (
            uint256 itemSKU,
            uint256 itemUPC,
            uint256 productID,
            string memory productNotes,
            uint256 productPrice,
            uint256 itemState
        )
    {
        // Assign values to the 9 parameters

        return (
            itemSKU = items[_upc].sku,
            itemUPC = items[_upc].upc,
            productID = items[_upc].productID,
            productNotes = items[_upc].productNotes,
            productPrice = items[_upc].productPrice,
            itemState = uint256(items[_upc].itemState)
        );
    }
}
