// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

let supplyChain = null;

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originManufacturerID = accounts[1]
    const originManufacturerName = "John Doe"
    const originManufacturerInformation = "vittoria"
    var productID = sku + upc
    const productNotes = "Best equipement for Espresso"
    const productPrice = "42"
    //const productPrice = web3.toWei(1, "ether")
    var itemState = 0
    const manufacturerID = accounts[1]
    const auditorID = accounts[2]
    const enduserID = accounts[3]
    const maintainerID = accounts[4]
    const emptyAddress = '0x0000000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Manufacturer: accounts[1] ", accounts[1])
    console.log("Auditor: accounts[2] ", accounts[2])
    console.log("EndUser: accounts[3] ", accounts[3])
    console.log("Maintainer: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function createEquipment() that allows a Manufacturer to create an equipment", async() => {
        supplyChain = await SupplyChain.deployed()
        await supplyChain.addManufacturer(manufacturerID, { from: ownerID });
        await supplyChain.addMaintainer(maintainerID, { from: ownerID });
        await supplyChain.addAuditor(auditorID, { from: ownerID });
        await supplyChain.addEndUser(enduserID, { from: ownerID });

        //console.log(await supplyChain.isEndUser(enduserID, { from: enduserID }));
        //console.log(await supplyChain.isAuditor(enduserID, { from: enduserID }));

        // Declare and Initialize a variable for event
        var eventEmitted = false
        await supplyChain.PendingManufacture((err, res) => eventEmitted = true);

        // Mark an item as PendingManufacture by calling function createEquipment()
        await supplyChain.createEquipment(upc, manufacturerID, originManufacturerName, originManufacturerInformation, productNotes, productPrice)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], emptyAddress, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], emptyAddress, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 2nd Test
    it("Testing smart contract function manufactureEquipment() that allows a enduser to order an equipment", async() => {
        
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isEndUser(enduserID, { from: enduserID }));
        // Watch the emitted event Manufactured()
        var eventEmitted = false
        await supplyChain.Manufactured((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function manufactureEquipment()
        await supplyChain.manufactureEquipment(upc, { from: manufacturerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], emptyAddress, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 3rd Test
    it("Testing smart contract function purchaseEquipment() that allows a Manufacturer to order coffee", async() => {
        
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isEndUser(enduserID, { from: enduserID }));
        assert.equal(true, await supplyChain.isAuditor(auditorID, { from: auditorID }));

        // Watch the emitted event EquipmentOrdered()
        var eventEmitted = false
        await supplyChain.EquipmentOrdered((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function purchaseEquipment()
        await supplyChain.purchaseEquipment(upc, auditorID, { from: enduserID, value: 125 })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
       assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 4th TestoriginManufacturerID
    it("Testing smart contract function requestModification() that allows an auditor to request modification to the manufacturer", async() => {
        
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isAuditor(auditorID, { from: auditorID }));

        // Watch the emitted event PendingModification()
        var eventEmitted = false
        await supplyChain.PendingModification((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function requestModification()
        await supplyChain.requestModification(upc, { from: auditorID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 5th Test
    it("Testing smart contract function modifyEquipment() that allows a Manufacturer to modify equipment", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isManufacturer(manufacturerID, { from: manufacturerID }));

        // Watch the emitted event Modified()
        var eventEmitted = false
        await supplyChain.Modified((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function modifyEquipment()
        await supplyChain.modifyEquipment(upc, { from: manufacturerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 6th Test
    it("Testing smart contract function requestCertification() that allows a Manufacturer to request a certification to an auditor", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isManufacturer(manufacturerID, { from: manufacturerID }));

        // Watch the emitted event PendingCertification()
        var eventEmitted = false
        await supplyChain.PendingCertification((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function modifyEquipment()
        await supplyChain.requestCertification(upc, { from: manufacturerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 7th Test
    it("Testing smart contract function inspectEquipment() that allows an auditor to inspect an equipement", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isAuditor(auditorID, { from: auditorID }));

        // Watch the emitted event InspectedManufacture()
        var eventEmitted = false
        await supplyChain.InspectedManufacture((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function inspectEquipment()
        await supplyChain.inspectEquipment(upc, { from: auditorID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows an auditor to reject Certification", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isAuditor(auditorID, { from: auditorID }));

        // Watch the emitted event PendingModification()
        var eventEmitted = false
        await supplyChain.PendingModification((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function rejectCertification()
        await supplyChain.rejectCertification(upc, { from: auditorID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
       assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })    

    // 9th Test
    it("Testing smart contract function certifyEquipment() that allows an auditor to accept Certification", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isAuditor(auditorID, { from: auditorID }));
        await supplyChain.modifyEquipment(upc, { from: manufacturerID })
        await supplyChain.requestCertification(upc, { from: manufacturerID })
        await supplyChain.inspectEquipment(upc, { from: auditorID })

        const certification = "meets all the compliance"

        // Watch the emitted event Certified()
        var eventEmitted = false
        await supplyChain.Certified((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function certifyEquipment()
        await supplyChain.certifyEquipment(upc, certification, { from: auditorID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
       assert.equal(resultBufferTwo[5], 9, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 10th Test
    it("Testing smart contract function shipEquipment() that allows a Manufacturer to send a certified equipement to enduser", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isManufacturer(manufacturerID, { from: manufacturerID }));

        // Watch the emitted event Shipped()
        var eventEmitted = false
        await supplyChain.Shipped((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function shipEquipment()
        await supplyChain.shipEquipment(upc, { from: manufacturerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 10, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 11th Test
    it("Testing smart contract function receiveEquipment() that allows a enduser to receive a certified equipement from the manufacturer", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isEndUser(enduserID, { from: enduserID }));

        // Watch the emitted event Received()
        var eventEmitted = false
        await supplyChain.Received((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function receiveEquipment()
        await supplyChain.receiveEquipment(upc, { from: enduserID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
       assert.equal(resultBufferTwo[5], 11, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 12th Test
    it("Testing smart contract function commissioningEquipment() that allows a enduser to commission the received certified equipement", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isEndUser(enduserID, { from: enduserID }));

        // Watch the emitted event Commission()
        var eventEmitted = false
        await supplyChain.Commission((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function commissioningEquipment()
        await supplyChain.commissioningEquipment(upc, { from: enduserID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
       assert.equal(resultBufferTwo[5], 12, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 13th Test
    it("Testing smart contract function utilseEquipment() that allows a enduser to use the equipement", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isEndUser(enduserID, { from: enduserID }));

        // Watch the emitted event Utilisation()
        var eventEmitted = false
        await supplyChain.Utilisation((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function utilseEquipment()
        await supplyChain.utilseEquipment(upc, { from: enduserID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], emptyAddress, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
       assert.equal(resultBufferTwo[5], 13, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 14th Test
    it("Testing smart contract function orderMaintainance() that allows a enduser to order a maintenance the equipement", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isEndUser(enduserID, { from: enduserID }));

        // Watch the emitted event PendingMaintenance()
        var eventEmitted = false
        await supplyChain.PendingMaintenance((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function orderMaintainance()
        await supplyChain.orderMaintainance(upc, maintainerID, auditorID, { from: enduserID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], maintainerID, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 14, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 15th Test
    it("Testing smart contract function quoteMaintenace() that allows an auditor to qoute to an order of a maintenance", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isAuditor(auditorID, { from: auditorID }));

        // Watch the emitted event QuotedMaintenance()
        var eventEmitted = false
        await supplyChain.QuotedMaintenance((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function quoteMaintenace()
        await supplyChain.quoteMaintenace(upc, 123, 45, "fix some", { from: auditorID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], maintainerID, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
       assert.equal(resultBufferTwo[5], 15, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 16th Test
    it("Testing smart contract function rejectMaintenanceQoute() that enduser to reject the quote of the order of a maintenance", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isEndUser(enduserID, { from: enduserID }));

        // Watch the emitted event PendingMaintenance()
        var eventEmitted = false
        await supplyChain.PendingMaintenance((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function rejectMaintenanceQoute()
        await supplyChain.rejectMaintenanceQoute(upc, { from: enduserID, value: 4567 })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], maintainerID, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
       assert.equal(resultBufferTwo[5], 14, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 17th Test
    it("Testing smart contract function payMaintenanceQuote() that enduser to accept the quote of the order of a maintenance", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isEndUser(enduserID, { from: enduserID }));
        await supplyChain.quoteMaintenace(upc, 123, 45, "fix some", { from: auditorID })

        // Watch the emitted event PaidMaintenance()
        var eventEmitted = false
        await supplyChain.PaidMaintenance((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function payMaintenanceQuote()
        await supplyChain.payMaintenanceQuote(upc, { from: enduserID, value: 4567 })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], maintainerID, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 16, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 18th Test
    it("Testing smart contract function requireRepair() that allows an auditor to require to an repair of a maintenance", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isAuditor(auditorID, { from: auditorID }));

        // Watch the emitted event RequestRepair()
        var eventEmitted = false
        await supplyChain.RequestRepair((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function requireRepair()
        await supplyChain.requireRepair(upc, { from: auditorID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], maintainerID, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
       assert.equal(resultBufferTwo[5], 17, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 19th Test
    it("Testing smart contract function repairEquipment() that allows a manufacturer to repair for the maintenance", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isMaintainer(maintainerID, { from: maintainerID }));

        // Watch the emitted event Repaired()
        var eventEmitted = false
        await supplyChain.Repaired((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function repairEquipment()
        await supplyChain.repairEquipment(upc, { from: maintainerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], maintainerID, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 18, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 20th Test
    it("Testing smart contract function requestInspection() that allows a manufacturer to require to an inspection of a maintenance", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isMaintainer(maintainerID, { from: maintainerID }));

        // Watch the emitted event PendingInspection()
        var eventEmitted = false
        await supplyChain.PendingInspection((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function requestInspection()
        await supplyChain.requestInspection(upc, { from: maintainerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], maintainerID, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 19, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 20th Test
    it("Testing smart contract function rejectInspection() that allows a auditor to inspect and reject a maintenance", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isAuditor(auditorID, { from: auditorID }));
        assert.equal(true, await supplyChain.isMaintainer(maintainerID, { from: maintainerID }));

        // Watch the emitted event RequestRepair()
        var eventEmitted = false
        await supplyChain.RequestRepair((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function inspectEquipmentMaintainance()
        await supplyChain.inspectEquipmentMaintainance(upc, false, { from: auditorID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], maintainerID, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 17, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })
    
    // 21th Test
    it("Testing smart contract function approveInspection() that allows a auditor to inspect and approves a maintenance", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isAuditor(auditorID, { from: auditorID }));
        await supplyChain.repairEquipment(upc, { from: maintainerID })
        await supplyChain.requestInspection(upc, { from: maintainerID })

        // Watch the emitted event Audited()
        var eventEmitted = false
        await supplyChain.Audited((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function inspectEquipmentMaintainance()
        await supplyChain.inspectEquipmentMaintainance(upc, true, { from: auditorID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], maintainerID, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
        assert.equal(resultBufferTwo[5], 20, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })

    // 21th Test
    it("Testing smart contract function shipEquipmentMaintainer() that allows a maintainer to send back to the enduser", async() => {
        // Declare and Initialize a variable for event
        assert.equal(true, await supplyChain.isMaintainer(maintainerID, { from: maintainerID }));

        // Watch the emitted event Repaired()
        var eventEmitted = false
        await supplyChain.Shipped((err, res) => eventEmitted = true);
        
        // Mark an item as Processed by calling function shipEquipmentMaintainer()
        await supplyChain.shipEquipmentMaintainer(upc, { from: maintainerID })

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], enduserID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], manufacturerID, 'Error: Missing or Invalid manufacturerID')
        assert.equal(resultBufferOne[4], auditorID, 'Error: Missing or Invalid auditorID')
        assert.equal(resultBufferOne[5], maintainerID, 'Error: Missing or Invalid maintainerID')
        assert.equal(resultBufferOne[6], originManufacturerInformation, 'Error: Missing or Invalid originManufacturerInformation')
       assert.equal(resultBufferTwo[5], 10, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')
    })
});

